We hold the entire init file in Org mode to allow increased comments, along with better organization.
This is connected to a github page.
  
First Steps
#+BEGIN_SRC emacs-lisp
;; Turn off mouse interface early in startup to avoid momentary display
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;; No splash screen please ... jeez
(setq inhibit-startup-message t)
#+END_SRC
  
We ensure that packages are installed by using the use-package package, so we require that melpa is hooked up and that use-package is installed
#+NAME: Package install stuff
#+BEGIN_SRC emacs-lisp
;;;-*- lexical-binding: t -*-
(require 'package)
(setq package-archives '(("elpa" . "http://tromey.com/elpa/")
			 ("gnu" . "http://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ))
(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))
(unless (package--user-selected-p 'use-package)
  (package-install 'use-package)
  )
(eval-and-compile
  (require 'use-package))
#+END_SRC 

We set the custom package to it's own file, instead of polluting our.
#+NAME: General file manegment
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name (concat user-emacs-directory "custom.el")))
(unless (file-exists-p custom-file)
  (write-region "" "" custom-file))
(load custom-file)
#+END_SRC

We apply the dracula theme.
We setup preferences for the mode-line:
I turn on battery and time displays, setup smart-mode-line (ssl) and disable the menu-bar
#+NAME: universal: cosmetics
#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil); must be assigned before (display-time-mode 1) is called
(display-time-mode 1); does not change in real time, so all settings must be assigned before
(display-battery-mode 1)

(use-package smart-mode-line
  :ensure t
  :hook (after-init . sml/setup)
  :config
  (setq sml/no-confirm-load-theme t)
  (setq sml/theme 'respectful) ;conforms to main emacs theme, set to nil to allow default colors
  (defface sml/charging ;this is much easier to see
    '((t :inherit sml/global :foreground "green")) "" :group 'smart-mode-line-faces)
  (add-to-list 'sml/replacer-regexp-list '("^~/Google Drive/" ":GDrive:") t) ;re replacement Google Drive -> GDrive
  (add-to-list 'sml/replacer-regexp-list '("^~/Dropbox" ":DBox:") t) ;re replacement Drop Box -> DBox
  )

(use-package dracula-theme
  :ensure t
  :config
  (load-theme 'dracula t) ;the 't' forces a load without asking
  )
#+END_SRC


 
Creates a set of universal functions that are called by varios major modes
We use my-prog-mode-called as a flag to indicate wither we load my-prog-mode again
#+NAME: universal: functions
#+BEGIN_SRC emacs-lisp
(setq my-prog-mode-called nil)
(defun my-prog-mode ()
  (when (equal my-prog-mode-called nil)
    (global-set-key (kbd "C-c q") 'comment-or-uncomment-region)
    (setq display-line-numbers t)
    (line-number-mode 0)
    (if (version<= "26.0.50" emacs-version) 
	(global-display-line-numbers-mode 1) ; displays line numbers on the left
      (linum-mode 1) ; display-line-numbers-mode was added in v26, so if earlier, we default to linum-mode
      )
    (flyspell-prog-mode) ;this tells flyspell to not complain about variable names
    (eldoc-mode 1)
    (setq company-minimum-prefix-length 1) ;we want an active company for programming, as there are many variable names, and memory is hard
    (setq font-lock-maximum-decoration t) ;lots of syntax highlighting
    (subword-mode t)
    (setq my-prog-mode-called t)
    (message "%s" (concat
		   "my-prog-mode was called successfully on major mode: "
		   (symbol-name major-mode)))
    ))
(defun call-my-prog-mode ()
  (interactive)
  (setq my-prog-mode-called nil)
  (my-prog-mode)
  )

(defun my-text-mode ()
  (wc-mode 1)               ; provides a word count
  (flyspell-mode 1)         ; recognizes misspellings
  (visual-line-mode 1)      ; we want the words to wrap
  (setq tab-width 4)
  
  (use-package define-word
    :ensure t
    :config
    (global-set-key (kbd "C-c d") 'define-word-at-point)
    (global-set-key (kbd "C-c D") 'define-word)
    )
  (message "%s" "my-text-mode was called successfully.")
  )
#+END_SRC


There is a collection of minor modes that trigger after other major modes load.
#+NAME: universal: minor-modes
#+BEGIN_SRC emacs-lisp

;; Save point position between sessions
(require 'saveplace)
(save-place-mode 1)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))

;;Company-math provides auto-complete for math symbols
(use-package company-math
  :ensure t
  :after (auctex markdown)
  :config
  (add-to-list 'company-backends 'company-math)
  (company-mode 1)
  (setq company-minimum-prefix-length 1)
  )

;;Word-count gives a total and diffrenced word count in the mode line
(use-package wc-mode
  :ensure t
  :hook ((LaTeX-mode ess-mode) . wc-mode)
  :config
  (wc-mode 1)
  )

;;electric-operator adds spaces before and after opperator symbols
(use-package electric-operator
  :ensure t
  :hook ((ess-mode LaTeX-mode) . electric-operator-mode)
  :config
  )
#+END_SRC


We maintain a list of common keybindings to activate in all modes
#+NAME: universal: keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-r") 'scroll-down)
(global-set-key (kbd "C-v") 'scroll-up)
(global-set-key (kbd "C-l") 'forward-word)
(global-set-key (kbd "C-j") 'backward-word)
(global-set-key (kbd "C-z") 'ispell-word)
(global-set-key (kbd "M--") 'undo)
(global-set-key (kbd "C-s") 'isearch-forward-regexp); this replaces normal isearch
(global-set-key (kbd "C-M-s") 'isearch-backward-regexp); replaces isearch-forward-regexp
(global-set-key (kbd "C-M-n")
  		(lambda ()
		  (interactive)
		  (ignore-errors (next-line 5))))
(global-set-key (kbd "C-M-p")
  		(lambda ()
  		  (interactive)
  		  (ignore-errors (previous-line 5))))
#+END_SRC


I customize emacs to respond to diffrent terminal setups
FIXME: read above
#+NAME: setup terminal functions
#+BEGIN_SRC emacs-lisp
(defun setup-iterm2 ()
  (define-key input-decode-map "[1;2A" [S-up])
  )
(setup-iterm2)
#+END_SRC

ido provides a great navigation experience with the find-file command. 
vlf stands for very large files and assists emacs with handling large files
FIXME: Im not sure is vlf is configured correctly
#+NAME: general file and navigation
#+BEGIN_SRC emacs-lisp

;; Interactively Do Things
(use-package ido
  :ensure t
  :config
  (ido-mode t)
  )
(setq read-file-name-completion-ignore-case nil)

;;Very Large Files
(use-package vlf
  :ensure t
  :config
  (require 'vlf-setup) ;not a seperate package, just pre-loading
  (custom-set-variables
   '(vlf-application 'dont-ask))
  )
#+END_SRC

Org mode provides a function text mode, so we give it many text mode type things
It overwrites \C-j, so we reassign that for the millionth time
#+NAME: Org-mode
#+BEGIN_SRC emacs-lisp

(defun my-org-mode()
  (when (equal (buffer-file-name)
	       (expand-file-name (concat user-emacs-directory "init.org")))
    (my-prog-mode)
    )
  (local-set-key "\C-j" 'backward-word)
  (my-text-mode)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-preserve-indentation t)
  (define-skeleton skeleton-src-block
    "Inserts a latex Letter Outline into the buffer"
    "#+NAME: " (setq v1 (skeleton-read "Name: ")) "\n"
    "#+BEGIN_SRC " (setq v2 (skeleton-read "Language: ")) "\n"
    "\n"
    "#+END_SRC"
    )
  (message "%s" "Org mode called successfully.")
  )
(add-hook 'org-mode-hook (lambda () (my-org-mode)))
#+END_SRC

Sets all backups to path to .emacs.d instead of cluttering the folder their in
#+NAME: universal: backups
#+BEGIN_SRC emacs-lisp
;; sets autosaves to one folder
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
 
;; Write backup files to own directory
(setq backup-directory-alist
      `(("." . ,(expand-file-name
		 (concat user-emacs-directory "backups")))))

;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)
#+END_SRC

Company is used for auto-completions. In the spirit of emacs, it can be customized for almost any language, but those customizations are module specific. Here, we only call the main version.
#+NAME: universal: company
#+BEGIN_SRC emacs-lisp
(use-package company-flx
  :ensure t
  :after (company)
  :config
  (company-flx-mode +1)
  )

(use-package company
  :ensure t
  :config
  (global-company-mode t)
  (setq company-idle-delay 0) ; this makes company respond in real time (no delay)
  (setq company-dabbrev-downcase 0) ; this makes it so company correctly gives cases
  )
#+END_SRC

ESS or Emacs Speaks Statistics is a major mode that I use to handle R. It could be extended to handle other S type stat languages in the future. 
#+NAME: Emacs Speaks Statistics
#+BEGIN_SRC emacs-lisp
(use-package ess
  :mode (("\\.r\\'" . ess-r-mode)
	 ("\\.R\\'" . ess-r-mode))  
  :ensure t
  :init
  (require 'ess-site)
  :config
  (setq inferior-ess-r-program "/usr/local/bin/R")
  ;; We assume the ability to generate graphs using a WindowsX(QuartsX) program.
  (setq ess-dialect "R")
  (setq ess-ask-for-ess-directory nil) ; directory defaults to whatever ess-directory-function returns
  (setq ess-directory-function nil) ; directory defaults to ess-directory
  (setq ess-directory nil) ; directory defaults to the directory of the opened file
  (add-hook 'inferior-ess-mode  'ess-execute-screen-options)
  )
#+END_SRC

I assign markdown to the appropriate extensions, and enable math-mode and wc-mode.
#+NAME: Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown")
  (setq markdown-enable-math t)
  :config
  (visual-line-mode 1)
  )
#+END_SRC

I use sly as my lisp editor
#+NAME: lisp
#+BEGIN_SRC emacs-lisp
(use-package sly
  :defer t
  :mode (("\\.lisp\\'" . sly-mode))
  :hook ((sly-mode . (lambda () (prettify-symbols-mode +1)))) ;lambda is necessary to call with arguments
  :ensure t 
  :config
  ;; The check prevents setting a new editor at compile time
  (prettify-symbols-mode +1)
  (lisp-mode)
  (if (string-suffix-p ".lisp" buffer-file-name)
      (setq inferior-lisp-program "/usr/local/bin/clisp"))
  (define-key sly-prefix-map (kbd "M-h") 'sly-documentation-lookup)
  (my-prog-mode)
  (setq sly-lisp-implementations '(
	  (clisp ("/usr/local/bin/clisp"))
	  ))
  (setq sly-default-lisp 'clisp)
  (message "%s"  (concat "sly(slime) package loaded on major-mode: " (symbol-name major-mode)))
  (sly)
  )
#+END_SRC

#+NAME: elisp
#+BEGIN_SRC emacs-lisp
(defun my-emacs-lisp-mode ()
  (prettify-symbols-mode +1)
  (my-prog-mode)
  )
(add-hook 'emacs-lisp-mode-hook (lambda () (my-emacs-lisp-mode)))
#+END_SRC

Configure rust, enabling rust-mode, cargo-mode, flymake-rust, and company-racer.
#+NAME: Rust-mode
#+BEGIN_SRC emacs-lisp
;;; Rust Minor Modes

;; rust plugin to enable flymake
(use-package flymake-rust
  :ensure t
  :after (rust-mode)
  :config
  (flymake-mode 1)
  )
;; Provides Cargo integration
(use-package cargo
  :ensure t
  :after (rust-mode)
  :config
  (cargo-minor-mode 1)
  (setq cargo-process--enable-rust-backtrace t)
  (setq cargo-process--command-build "build --verbose")
  (setq cargo-process--command-run "run --verbose")
  )

;; Provides Company integration with Racer
(use-package company-racer
  :ensure t
  :init
  (company-mode 1)
  (setq company-racer-executable "racer")
  (unless (getenv "RUST_SRC_PATH") ; should construct this path in elisp, then it would be absolute, but also adjustable
    (setenv "RUST_SRC_PATH" (expand-file-name ; this path must be absolute
			     "~/.rustup/toolchains/nightly-x86_64-apple-darwin/lib/rustlib/src/rust/src")))
  :config
  (add-to-list 'company-backends 'company-racer)
  )

;;; Rust Major Mode
(use-package rust-mode
  :mode ("\\.rs\\'" . rust-mode)
  :ensure t
  :config
  (my-prog-mode)
  (setq rust-format-on-save t)
  (message "%s" "Rust mode was called successfully")
  )

#+END_SRC

Setup elpy to provide auto-complete, highlighting, indent guides, along with an inferior shell
#+NAME: Python (elpy) configuration
#+BEGIN_SRC emacs-lisp

;;; Python Minor Modes

;;pyenv mode - Virtual Enviroment Manager
(use-package pyenv-mode ;;FIXME
  :ensure t
  :after (elpy)
  :init
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyenv-mode)
  )

;; Indentation Guide
(use-package highlight-indent-guides ;;FIXME
  :ensure t
  :after (elpy)
  :config
  (highlight-indentation-mode 0)
  (setq highlight-indent-guides-method 'column); could be "character", "fill", "column"
  (setq highlight-indent-guides-character ?\|) ;sets character of the highlight, if in character mode
  (setq highlight-indent-guides-responsive nil); options: 'top, 'stack, this dictates if and how it responds to the cursor position
  (setq highlight-indent-guides-delay 0); respond immediately to the cursor
  (setq highlight-indent-guides-auto-enabled nil) ;this means that I can set colors, t means that it will guess based on theme
  (set-face-background 'highlight-indent-guides-odd-face "darkcyan")
  (set-face-background 'highlight-indent-guides-even-face "darkcyan")
  (set-face-foreground 'highlight-indent-guides-character-face "dimgrey")
  (highlight-indent-guides-mode 1); turn on mode
  )

;; Setup Python3 shell
(defun set-shell-python3 ()
  (interactive)
  (setq python-shell-interpreter "python3")
  (setq python-shell-interpreter-args "-i")
  (with-eval-after-load 'python
    ;;This makes readline work in the interpreter
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
	    (python-shell-completion-native-output-timeout
	     python-shell-completion-native-try-output-timeout))
	(python-shell-completion-native-get-completions
	 (get-buffer-process (current-buffer))
	 nil "_"))))
  )

;; Setup iPython shell
(defun set-shell-ipython ()
  (interactive)
  (setq python-shell-interpreter "ipython")
  (setq python-shell-interpreter-args "--simple-prompt -i")
  )

;; Elpy specific key bingins
;; As Elpy does not conform to key-maps, we do it this way :bind does not work
(defun elpy-key-bindings ()
  (local-set-key "\M-]" 'elpy-nav-indent-shift-right)
  (local-set-key "\M-[" 'elpy-nav-indent-shift-left)
  (local-set-key "C-x p e" 'pyenv-activate-current-project)
  )
 
;;; Python Major Mode - Elpy
(use-package elpy
  :defer t
  :mode ("\\.py\\'" . python-mode)
  :hook ((python-mode . elpy-mode))
  :ensure t
  :config
  (my-prog-mode)
  (elpy-key-bindings)
  (add-hook 'before-save-hook (lambda () (elpy-format-code)))
  (elpy-enable)
  (setq elpy-rpc-backend "company")
  (setq indent-tabs-mode nil)
  (setq elpy-rpc-python-command "python3")
  (elpy-rpc-restart)
  (set-shell-python3)
  (message "%s" (concat "Python mode was called successfully. major-mode: "
			(symbol-name major-mode)))
  )
#+END_SRC

Sets up latex support along with a collection of skeletons for latex
#+NAME: latex
#+BEGIN_SRC emacs-lisp

(defun latex-config ()
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (local-set-key "\C-j" 'backward-word)
  (display-line-numbers-mode)
  (visual-line-mode)
  (visual-line-mode)
  (define-skeleton skeleton-math-letter
    "Inserts a latex Letter Outline into the buffer"
    "Title: "
    "\\documentclass[11pt, oneside]{article}\n"
    "\\usepackage{geometry}\n"
    "\\geometry{letterpaper}\n"
    "\\usepackage{graphicx}\n"
    "\\usepackage{amssymb}\n"
    "\\usepackage{enumitem}\n"
    "\\usepackage{amsmath}\n"
    "\\usepackage{amsfonts}\n"
    "\\makeatletter\n"
    "\\newcommand{\\zz}{\\mathbb{Z}}\n"
    "\\newcommand{\\rr}{\\mathbb{R}}\n"
    "\\newcommand{\\cc}{\\mathbb{C}}\n"
    "\\newcommand{\\qq}{\\mathbb{Q}}\n"
    "\\newcommand{\\nsum}{\\sum^n_{i=1}}\n"
    "\\newcommand{\\exc}[1]{$ $\\\\\\noindent\\textbf{Problem #1}}\n"
    "\\newcommand{\\inpr}[2]{\\langle #1, #2\\rangle}\n"
    "\\newcommand{\\floor}[1]{\\lfloor #1 \\rfloor}\n"
    "\\newcommand{\\bmatrix}[1]{\\begin{bmatrix}#1\\end{bmatrix}}\n"
    "\\newcommand{\\fl}{{\\mathcal L}}\n"
    "\\newcommand{\\fu}{{\\mathcal U}}\n"
    "\\usepackage{tikz}\n"
    "\\title{" str | "Title " "\n"
    "\\\\ \\large " (setq v1 (skeleton-read "Class:"))  "}\n"
    "\\author{" (getenv "DISPLAY_NAME") "}\n"
    "\\date{" (setq v2 (skeleton-read "Date:")) "}\n"
    "\\begin{document}\n"
    "\\maketitle\n"
    "$\n"
    "$\\\\\n"
    -
    "\n\n\n\\end{document}"
    )
  (message "%s" "LaTeX-mode has been loaded successfully")
  )
(use-package tex
  :defer t
  :mode ("\\.tex\\'" . LaTeX-mode)
  :hook (LaTeX-mode . latex-config)
  :ensure auctex
  )
#+END_SRC 
 
We want init.org to have special behavior, specifically we want init.org to tangle to a .el file then byte compile for loading speed
#+NAME: init.org to byte
#+BEGIN_SRC emacs-lisp
(defun tangle-init-call ()
  (when (equal (buffer-file-name)
	       (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle-file buffer-file-name (concat user-emacs-directory "init.el"))
      ;; uncomment to byte compile init.el on save
      ;;(byte-compile-file (concat user-emacs-directory "init.el"))
      )
    )
  )
(add-hook 'after-save-hook 'tangle-init-call)
#+END_SRC
